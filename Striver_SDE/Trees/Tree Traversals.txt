/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/
#include<stack>
vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    vector<vector<int>> ans;
    vector<int> preorder ,inorder, postorder;
    int num = 1;

    stack<pair<BinaryTreeNode<int> *,int>>st;
    
    BinaryTreeNode<int> *curr = root;
    
    st.push({curr,1});
    

    while (!st.empty() && curr != NULL)
    {
        
        auto temp = st.top();
        st.pop();
        if (temp.second == 1)  // Case Of Preorder
        {
            preorder.push_back(temp.first->data);
            temp.second++;
            st.push(temp);
            
            if (temp.first->left)
            {
                st.push({temp.first->left,1});
            }
            
        }

        else if (temp.second == 2) // Case of Postorder
        {
            inorder.push_back(temp.first->data);
            temp.second++;
            st.push(temp);

            if (temp.first->right)
            {
                st.push({temp.first->right, 1});
            }
        }

        else if (temp.second == 3)
        {
            postorder.push_back(temp.first->data);
        }
        
    }
    ans.push_back(inorder);
    ans.push_back(preorder);
    ans.push_back(postorder);
    
    return ans;
}